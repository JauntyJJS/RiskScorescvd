[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Daniel Perez-Vicencio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Perez-Vicencio. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Perez-Vicencio D (2023). RiskScorescvd: Cardiovascular Risk Scores Calculator. R package version 0.1.0.","code":"@Manual{,   title = {RiskScorescvd: Cardiovascular Risk Scores Calculator},   author = {Daniel Perez-Vicencio},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"riskscorescvd","dir":"","previous_headings":"","what":"Cardiovascular Risk Scores Calculator","title":"Cardiovascular Risk Scores Calculator","text":"Chest pain? Calculate cardiovascular risk score. goal RiskScorescvd r package calculate commonly used cardiovascular risk scores. developed five commonly used risk scores dependency (ASCVD [PooledCohort]) making following available: HEART EDACS GRACE 2.0 TIMI SCORE2/OP ASCVD","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cardiovascular Risk Scores Calculator","text":"can install development version RiskScorescvd GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dvicencio/RiskScorescvd\")"},{"path":[]},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Cardiovascular Risk Scores Calculator","text":"basic example data set look calculate risk scores available package:","code":"library(RiskScorescvd) #> Loading required package: PooledCohort # Create a data frame or list with the necessary variables  # Set the number of rows  num_rows <- 100    # Create a large dataset with 100 rows   cohort_xx <- data.frame(    typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),    ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),    diabetes = sample(c(1, 0), num_rows, replace = TRUE),    smoker = sample(c(1, 0), num_rows, replace = TRUE),    hypertension = sample(c(1, 0), num_rows, replace = TRUE),    hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),    family.history = sample(c(1, 0), num_rows, replace = TRUE),    atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),    presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),    Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),    sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),    killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),    systolic.bp = as.numeric(sample(40:300, num_rows, replace = TRUE)),    heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),    creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),    cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),    number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),    total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),    total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),    Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE)  )    str(cohort_xx) #> 'data.frame':    100 obs. of  31 variables: #>  $ typical_symptoms.num   : num  6 5 2 5 1 3 1 1 1 2 ... #>  $ ecg.normal             : num  0 1 0 0 1 0 1 1 0 1 ... #>  $ abn.repolarisation     : num  1 1 0 1 1 1 0 1 0 0 ... #>  $ ecg.st.depression      : num  1 1 0 1 1 0 0 1 1 1 ... #>  $ Age                    : num  70 77 51 64 77 32 70 79 56 57 ... #>  $ diabetes               : num  1 0 1 0 0 1 0 1 0 1 ... #>  $ smoker                 : num  1 0 0 1 0 1 0 1 1 0 ... #>  $ hypertension           : num  0 1 1 1 1 0 1 1 1 1 ... #>  $ hyperlipidaemia        : num  1 0 1 0 0 1 1 1 1 0 ... #>  $ family.history         : num  1 1 0 0 1 0 1 1 0 1 ... #>  $ atherosclerotic.disease: num  1 1 0 1 0 1 1 1 1 0 ... #>  $ presentation_hstni     : num  10 56 97 86 78 94 63 39 63 89 ... #>  $ Gender                 : chr  \"male\" \"female\" \"female\" \"male\" ... #>  $ sweating               : num  1 0 1 1 1 1 0 1 1 0 ... #>  $ pain.radiation         : num  1 0 1 0 0 0 0 1 1 0 ... #>  $ pleuritic              : num  0 0 0 0 0 1 0 0 1 0 ... #>  $ palpation              : num  1 1 0 0 0 1 0 0 1 0 ... #>  $ ecg.twi                : num  1 1 0 1 0 0 1 1 0 1 ... #>  $ second_hstni           : num  161 124 9 65 116 6 134 65 106 121 ... #>  $ killip.class           : num  3 4 3 1 3 2 2 3 4 3 ... #>  $ systolic.bp            : num  252 51 59 166 85 145 279 246 85 101 ... #>  $ heart.rate             : num  61 64 23 52 294 164 135 74 244 217 ... #>  $ creat                  : num  4 3 4 4 3 3 2 0 2 0 ... #>  $ cardiac.arrest         : num  0 1 0 0 0 1 1 0 1 1 ... #>  $ previous.pci           : num  1 1 1 1 1 0 1 0 0 0 ... #>  $ previous.cabg          : num  1 0 1 0 1 0 0 0 0 1 ... #>  $ aspirin                : num  0 1 0 1 0 1 0 1 1 1 ... #>  $ number.of.episodes.24h : num  5 12 17 19 2 16 17 19 0 3 ... #>  $ total.chol             : num  34 29 42 97 36 41 70 56 28 7 ... #>  $ total.hdl              : num  5 3 3 3 2 3 2 5 3 3 ... #>  $ Ethnicity              : chr  \"other\" \"white\" \"white\" \"asian\" ..."},{"path":"/index.html","id":"calculation-and-results","dir":"","previous_headings":"","what":"Calculation and Results","title":"Cardiovascular Risk Scores Calculator","text":"basic example calculate risk scores available package create new data set 12 new variables calculated classified risk scores:","code":"# Call the function with the cohort_xx to calculate all risk scores available in the package new_data_frame <- calc_scores(data = cohort_xx)   # Select columns created after calculation All_scores <- new_data_frame %>% select(HEART_score, HEART_strat, EDACS_score, EDACS_strat, GRACE_score, GRACE_strat, TIMI_score, TIMI_strat, SCORE2_score, SCORE2_strat, ASCVD_score, ASCVD_strat)  # Observe the results head(All_scores) #> # A tibble: 6 × 12 #> # Rowwise:  #>   HEART_score HEART_strat   EDACS_score EDACS_strat  GRACE_score GRACE_strat   #>         <dbl> <ord>               <dbl> <ord>              <dbl> <ord>         #> 1           8 High risk              20 Not low risk         110 Moderate risk #> 2          10 High risk              10 Not low risk         191 High risk     #> 3           7 High risk              14 Not low risk         111 Moderate risk #> 4           8 High risk              19 Not low risk          95 Moderate risk #> 5           7 High risk              19 Not low risk         208 High risk     #> 6           5 Moderate risk           5 Not low risk          72 Low risk      #> # ℹ 6 more variables: TIMI_score <dbl>, TIMI_strat <ord>, SCORE2_score <dbl>, #> #   SCORE2_strat <ord>, ASCVD_score <dbl>, ASCVD_strat <ord>  # Create a summary of them to obtain an initial idea of distribution summary(All_scores) #>   HEART_score           HEART_strat  EDACS_score          EDACS_strat #>  Min.   : 2.00   Low risk     : 7   Min.   :-8.00   Low risk    : 1   #>  1st Qu.: 5.00   Moderate risk:56   1st Qu.: 5.75   Not low risk:99   #>  Median : 6.00   High risk    :37   Median :11.00                     #>  Mean   : 6.02                      Mean   :10.44                     #>  3rd Qu.: 7.00                      3rd Qu.:15.25                     #>  Max.   :10.00                      Max.   :24.00                     #>   GRACE_score           GRACE_strat   TIMI_score           TIMI_strat #>  Min.   : 15.0   Low risk     :26   Min.   :1.00   Very low risk: 0   #>  1st Qu.: 86.0   Moderate risk:38   1st Qu.:3.00   Low risk     : 6   #>  Median :106.5   High risk    :36   Median :4.00   Moderate risk:51   #>  Mean   :106.9                      Mean   :4.21   High risk    :43   #>  3rd Qu.:126.5                      3rd Qu.:5.00                      #>  Max.   :208.0                      Max.   :6.00                      #>   SCORE2_score           SCORE2_strat  ASCVD_score            ASCVD_strat #>  Min.   :  0.00   Very low risk: 0    Min.   :0.0000   Very low risk: 9   #>  1st Qu.: 25.00   Low risk     : 5    1st Qu.:0.1200   Low risk     : 8   #>  Median : 98.50   Moderate risk: 8    Median :0.3150   Moderate risk:20   #>  Mean   : 69.38   High risk    :87    Mean   :0.4526   High risk    :63   #>  3rd Qu.:100.00                       3rd Qu.:0.8600                      #>  Max.   :100.00                       Max.   :1.0000"},{"path":"/reference/ASCVD.html","id":null,"dir":"Reference","previous_headings":"","what":"ASCVD (Atherosclerotic Cardiovascular Disease) Risk Algorithm including Known ASCVD from AHA/ACC — ASCVD","title":"ASCVD (Atherosclerotic Cardiovascular Disease) Risk Algorithm including Known ASCVD from AHA/ACC — ASCVD","text":"function implements ASCVD score calculation vector Scored using 3 steps Step 1: High-Risk Criteria: History ASCVD  History ASCVD - History acute coronary syndrome (ACS), myocardial infarction (MI), stable angina, coronary/arterial revascularization, stroke, transient ischemic attack, Peripheral Arterial Disease (PAD) atherosclerosis Step 2: High-Risk Criteria: Extreme LDL LDL Cholesterol >= 190mg/dL (4.92 mmol/L) Step 3: ASCVD Risk Criteria: Apply LDL 70-189mg/dL (1.81-4.90 mmol/L) Age Diabetes Total cholesterol HDL cholesterol Systolic BP Treatment Hypertension Smoker Race Black British Black; everything else White Three possible outcome High risk - Intensity Statin Therapy Moderate risk- Intensity Statin Therapy Low risk - Intensity Statin Therapy","code":""},{"path":"/reference/ASCVD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASCVD (Atherosclerotic Cardiovascular Disease) Risk Algorithm including Known ASCVD from AHA/ACC — ASCVD","text":"","code":"ASCVD(   Gender = Gender,   Ethnicity = Ethnicity,   Age = Age,   total.chol = total.chol,   total.hdl = total.hdl,   systolic.bp = systolic.bp,   hypertension = hypertension,   smoker = smoker,   diabetes = diabetes,   classify = FALSE )"},{"path":"/reference/ASCVD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ASCVD (Atherosclerotic Cardiovascular Disease) Risk Algorithm including Known ASCVD from AHA/ACC — ASCVD","text":"Gender binary character vector sex values. Categories include 'male' 'female' Ethnicity character vector, 'white', 'black', 'asian', Age numeric vector age values, years total.chol numeric vector total cholesterol values, mmol/L total.hdl numeric vector total high density lipoprotein HDL values, mmol/L systolic.bp numeric vector systolic blood pressure continuous values hypertension binary numeric vector, 1 = yes 0 = smoker binary numeric vector, 1 = yes 0 = diabetes binary numeric vector, 1 = yes 0 = classify logical parameter indicate classification Scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/ASCVD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ASCVD (Atherosclerotic Cardiovascular Disease) Risk Algorithm including Known ASCVD from AHA/ACC — ASCVD","text":"vector ASCVD score calculations /vector classifications indicated","code":""},{"path":"/reference/ASCVD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ASCVD (Atherosclerotic Cardiovascular Disease) Risk Algorithm including Known ASCVD from AHA/ACC — ASCVD","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),   total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),   total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),   Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE) )   # Call the function with the cohort_xx  results <- cohort_xx %>% rowwise() %>%  mutate(ASCVD_score = ASCVD(Gender, Ethnicity, Age, total.chol, total.hdl,  systolic.bp,hypertension, smoker, diabetes, classify = FALSE))"},{"path":"/reference/ASCVD_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"ASCVD risk score function\nASCVD = Atherosclerotic Cardiovascular Disease — ASCVD_scores","title":"ASCVD risk score function\nASCVD = Atherosclerotic Cardiovascular Disease — ASCVD_scores","text":"function allows calculate ASCVD score row wise data frame required variables. retrieve data frame two extra columns including calculations classifications","code":""},{"path":"/reference/ASCVD_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASCVD risk score function\nASCVD = Atherosclerotic Cardiovascular Disease — ASCVD_scores","text":"","code":"ASCVD_scores(   data,   Gender = Gender,   Ethnicity = Ethnicity,   Age = Age,   total.chol = total.chol,   total.hdl = total.hdl,   systolic.bp = systolic.bp,   hypertension = hypertension,   smoker = smoker,   diabetes = diabetes,   classify )"},{"path":"/reference/ASCVD_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ASCVD risk score function\nASCVD = Atherosclerotic Cardiovascular Disease — ASCVD_scores","text":"data data frame variables needed calculation: Gender, Ethnicity, Age, total.chol, total.hd, systolic.bp,hypertension, smoker, diabetes Gender binary character vector sex values. Categories include 'male' 'female'. Ethnicity character vector, 'white', 'black', 'asian', Age numeric vector age values, years total.chol numeric vector total cholesterol values, mmol/L total.hdl numeric vector total high density lipoprotein HDL values, mmol/L systolic.bp numeric vector systolic blood pressure continuous values hypertension binary numeric vector, 1 = yes 0 = smoker binary numeric vector, 1 = yes 0 = diabetes binary numeric vector, 1 = yes 0 = classify logical parameter indicate classification Scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/ASCVD_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ASCVD risk score function\nASCVD = Atherosclerotic Cardiovascular Disease — ASCVD_scores","text":"data frame two extra columns including ASCVD score calculations classifications","code":""},{"path":"/reference/ASCVD_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ASCVD risk score function\nASCVD = Atherosclerotic Cardiovascular Disease — ASCVD_scores","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),   total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),   total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),   Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE) )   # Call the function with the cohort_xx result <- ASCVD_scores(data = cohort_xx, classify = TRUE) # Print the results summary(result$ASCVD_score) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.0000  0.1325  0.3400  0.4567  0.7900  1.0000  summary(result$ASCVD_strat) #> Very low risk      Low risk Moderate risk     High risk  #>            15             7            11            67"},{"path":"/reference/EDACS.html","id":null,"dir":"Reference","previous_headings":"","what":"Emergency Department Assessment of Chest Pain Score (EDACS) — EDACS","title":"Emergency Department Assessment of Chest Pain Score (EDACS) — EDACS","text":"function implements EDACS score calculation vector Age - 18-45 = 2 46-50 = 4 51-55 = 6 56-60 = 8 61-65 = 10 66-70 = 12 71-75 = 14 76-80 = 16 81-85 = 18 >=86 = 20 Sex - Female = 0 Male = 6 Known coronary artery disease >=3 risk factors* risk factors apply patients 18-50- = 0 yes = 4 Symptoms signs Diaphoresis                                         = 0   yes = 3 Pain radiates arm, shoulder, neck, jaw        = 0   yes = 5 Pain occurred worsened inspiration          = 0   yes = -4 Pain reproduced palpation                     = 0   yes = -6 Two possible outcomes Low risk cohort: EDACS <16 EKG shows new ischemia 0-hr 2-hr troponin negative. low risk cohort: EDACS >=16 EKG shows new ischemia 0-hr 2-hr troponin positive.","code":""},{"path":"/reference/EDACS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emergency Department Assessment of Chest Pain Score (EDACS) — EDACS","text":"","code":"EDACS(   Age = Age,   Gender = Gender,   diabetes = diabetes,   smoker = smoker,   hypertension = hypertension,   hyperlipidaemia = hyperlipidaemia,   family.history = family.history,   sweating = sweating,   pain.radiation = pain.radiation,   pleuritic = pleuritic,   palpation = palpation,   ecg.st.depression = ecg.st.depression,   ecg.twi = ecg.twi,   presentation_hstni = presentation_hstni,   second_hstni = second_hstni,   classify = FALSE )"},{"path":"/reference/EDACS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emergency Department Assessment of Chest Pain Score (EDACS) — EDACS","text":"Age numeric vector age values, years Gender binary character vector sex values. Categories include 'male' 'female'. diabetes binary numeric vector, 1 = yes 0 = smoker binary numeric vector, 1 = yes 0 = hypertension binary numeric vector, 1 = yes 0 = hyperlipidaemia binary numeric vector, 1 = yes 0 = family.history binary numeric vector, 1 = yes 0 = sweating binary numeric vector, 1 = yes 0 = pain.radiation binary numeric vector, 1 = yes 0 = pleuritic binary numeric vector, 1 = yes 0 = palpation binary numeric vector, 1 = yes 0 = ecg.st.depression binary numeric vector, 1 = yes 0 = ecg.twi binary numeric vector, 1 = yes 0 = presentation_hstni continuous numeric vector troponin levels second_hstni binary numeric vector, 1 = yes 0 = classify logical parameter indicate classification scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/EDACS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emergency Department Assessment of Chest Pain Score (EDACS) — EDACS","text":"vector EDACS score calculations /vector classifications indicated","code":""},{"path":"/reference/EDACS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emergency Department Assessment of Chest Pain Score (EDACS) — EDACS","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)) )  # Call the function with the cohort_xx  results <- cohort_xx %>% rowwise() %>% mutate(EDACS_score = EDACS(Age, Gender, diabetes, smoker, hypertension, hyperlipidaemia, family.history, sweating, pain.radiation, pleuritic, palpation, ecg.st.depression, ecg.twi, presentation_hstni, second_hstni, classify = FALSE))"},{"path":"/reference/EDACS_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"EDACS score function\nEDACS = Emergency Department Assessment of Chest Pain Score — EDACS_scores","title":"EDACS score function\nEDACS = Emergency Department Assessment of Chest Pain Score — EDACS_scores","text":"function allows calculate EDACS score row wise data frame required variables. retrieve data frame two extra columns including calculations classifications","code":""},{"path":"/reference/EDACS_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EDACS score function\nEDACS = Emergency Department Assessment of Chest Pain Score — EDACS_scores","text":"","code":"EDACS_scores(   data,   Age = Age,   Gender = Gender,   diabetes = diabetes,   smoker = smoker,   hypertension = hypertension,   hyperlipidaemia = hyperlipidaemia,   family.history = family.history,   sweating = sweating,   pain.radiation = pain.radiation,   pleuritic = pleuritic,   palpation = palpation,   ecg.st.depression = ecg.st.depression,   ecg.twi = ecg.twi,   presentation_hstni = presentation_hstni,   second_hstni = second_hstni,   classify )"},{"path":"/reference/EDACS_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EDACS score function\nEDACS = Emergency Department Assessment of Chest Pain Score — EDACS_scores","text":"data data frame variables needed calculation: Age, Gender, diabetes, smoker, hypertension, hyperlipidaemia, family.history, sweating, pain.radiation, pleuritic, palpation, ecg.st.depression, ecg.twi,  presentation_hstni, second_hstni, classify Age numeric vector age values, years Gender binary character vector sex values. Categories include 'male' 'female' diabetes binary numeric vector, 1 = yes 0 = smoker binary numeric vector, 1 = yes 0 = hypertension binary numeric vector, 1 = yes 0 = hyperlipidaemia binary numeric vector, 1 = yes 0 = family.history binary numeric vector, 1 = yes 0 = sweating binary numeric vector, 1 = yes 0 = pain.radiation binary numeric vector, 1 = yes 0 = pleuritic binary numeric vector, 1 = yes 0 = palpation binary numeric vector, 1 = yes 0 = ecg.st.depression binary numeric vector, 1 = yes 0 = ecg.twi binary numeric vector, 1 = yes 0 = presentation_hstni continuous numeric vector troponin levels second_hstni binary numeric vector, 1 = yes 0 = classify logical parameter indicate classification Scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/EDACS_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EDACS score function\nEDACS = Emergency Department Assessment of Chest Pain Score — EDACS_scores","text":"data frame two extra columns including 'EDACS_score' calculations classifications, 'EDACS_strat'","code":""},{"path":"/reference/EDACS_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EDACS score function\nEDACS = Emergency Department Assessment of Chest Pain Score — EDACS_scores","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)) )  # Call the function with the cohort_xx  result <- EDACS_scores(data = cohort_xx, classify = TRUE) summary(result$EDACS_strat) #>     Low risk Not low risk  #>            1           99  summary(result$EDACS_score) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   -4.00    5.75   10.00    9.70   13.00   23.00"},{"path":"/reference/GRACE.html","id":null,"dir":"Reference","previous_headings":"","what":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE","text":"function implements GRACE 2.0 6 months outcome score calculation vector Needed variables -------------------------------------------------------- Age = Heart Rate = H Systolic BP = S Creatine = C killip.class class (signs/symptoms) = K CHF = 1 Rales /JVD = 2 Pulmonary edema = 3 Cardiogenic shock = 4 Cardiac Arrest = X = 0  yes = 1 ST segment deviation EKG? = E = 0  yes = 1 Abnormal cardiac enzymes = T = 0  yes = 1 Add variables equation solve p xb= -7.7035 + (0.0531*) + (0.0087*H) - (0.0168*S) + (0.1823*C) + (0.6931* K) + (1.4586*Xt) + (0.4700*E) + (0.8755*T); p=(exp(xb))/(1 + exp(xb)); Possible outcomes percentage Probability death admission 6 months given footnote: * = Available, NA = notavailable. Another formula found https://www.outcomes-umassmed.org/grace/files/GRACE_RiskModel_Coefficients.pdf https://www.outcomes-umassmed.org/grace/grace_risk_table.aspx https://www.outcomes-umassmed.org/grace/acs_risk2/index.html •\tLow \t\t\t       1-88 •\tIntermediate \t\t89-118 •\tHigh \t\t\t     119-263","code":""},{"path":"/reference/GRACE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE","text":"","code":"GRACE(   killip.class = killip.class,   systolic.bp = systolic.bp,   heart.rate = heart.rate,   Age = Age,   creat = creat,   ecg.st.depression = ecg.st.depression,   presentation_hstni = presentation_hstni,   cardiac.arrest = cardiac.arrest,   Gender = Gender,   classify = FALSE )"},{"path":"/reference/GRACE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE","text":"killip.class numeric vector killip class values, 1 4 systolic.bp numeric vector systolic blood pressure continuous values heart.rate numeric vector heart rate continuous values Age numeric vector age values, years creat continuous numeric vector creatine levels ecg.st.depression binary numeric vector, 1 = yes 0 = presentation_hstni continuous numeric vector troponin levels cardiac.arrest binary numeric vector, 1 = yes 0 = Gender binary character vector sex values. Categories include 'male' 'female' classify logical parameter indicate classification Scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/GRACE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE","text":"vector GRACE score calculations /vector classifications indicated","code":""},{"path":"/reference/GRACE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)) ) # Call the function with the cohort_xx    results <- cohort_xx %>% rowwise() %>%   mutate(GRACE_score = GRACE(killip.class, systolic.bp, heart.rate,   Age, creat, ecg.st.depression, presentation_hstni, cardiac.arrest, Gender, classify = FALSE))"},{"path":"/reference/GRACE_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE_scores","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE_scores","text":"function allows calculate GRACE 2.0 score row wise data frame required variables. retrieve data frame two extra columns including calculations classifications","code":""},{"path":"/reference/GRACE_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE_scores","text":"","code":"GRACE_scores(   data,   killip.class = killip.class,   systolic.bp = systolic.bp,   heart.rate = heart.rate,   Age = Age,   creat = creat,   ecg.st.depression = ecg.st.depression,   presentation_hstni = presentation_hstni,   cardiac.arrest = cardiac.arrest,   Gender = Gender,   classify )"},{"path":"/reference/GRACE_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE_scores","text":"data data frame variables needed calculation: killip.class, systolic.bp, heart.rate, Age, creat, ecg.st.depression, presentation_hstni, cardiac.arrest, Gender, classify killip.class numeric vector killip class values, 1 4 systolic.bp numeric vector systolic blood pressure continuous values heart.rate numeric vector heart rate continuous values Age numeric vector age values, years creat continuous numeric vector creatine levels ecg.st.depression binary numeric vector, 1 = yes 0 = presentation_hstni continuous numeric vector troponin levels cardiac.arrest binary numeric vector, 1 = yes 0 = Gender binary character vector sex values. Categories include 'male' 'female' classify logical parameter indicate classification Scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/GRACE_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE_scores","text":"data frame two extra columns including 'GRACE_score' calculations classifications, 'GRACE_strat'","code":""},{"path":"/reference/GRACE_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GRACE Global Registry of Acute Coronary Events version 2.0, 6 months outcome — GRACE_scores","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)) ) # Call the function with the cohort_xx result <- GRACE_scores(data = cohort_xx, classify = TRUE) summary(result$GRACE_strat) #>      Low risk Moderate risk     High risk  #>            16            21            63  summary(result$GRACE_score) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    35.0   102.5   133.0   133.9   164.2   231.0"},{"path":"/reference/HEART.html","id":null,"dir":"Reference","previous_headings":"","what":"History, ECG, Age, Risk factors and Troponin (HEART) risk score — HEART","title":"History, ECG, Age, Risk factors and Troponin (HEART) risk score — HEART","text":"function implements HEART score calculation vector History - Absence history coronary ischemia: nonspecific  = 0 Nonspecific + suspicious elements: moderately suspicious = 1 Mainly suspicious elements (middle- left-sided, / heavy chest pain, radiation, / /relief symptoms sublingual nitrates):  = 2 EGG - Normal ECG according Minnesota criteria (criteria?)  = 0 Repolarization abnormalities without / significant ST-segment depression elevation                   = 1 Presence bundle branch block pacemaker rhythm, / typical abnormalities indicative left ventricular hypertrophy, / repolarization abnormalities probably caused digoxin use, / case unchanged known repolarization disturbances.            = 1 Significant ST-segment depressions / elevations absence bundle branch block, / left ventricular hypertrophy, use digoxin       =  2 Age - Younger 45 = 0 45 65 years old = 1 65 years older = 2 Risk facrtor - Currently treated diabetes mellitus, / current recent (<90 days) smoker, / diagnosed /treated hypertension, / diagnosed hypercholesterolemia, / family history coronary artery disease, obesity (body mass index BMI >30), history significant atherosclerosis, / (coronary revascularization, myocardial infarction, stroke, / peripheral arterial disease, / irrespective risk factors coronary artery disease) None = 0 One two = 1 Three = 2 Troponin T - threshold positivity = 0                    1 3 times threshold positivity = 1    higher 3 times threshold positivity   = 2    Two possible outcomes: 0-3 = Low risk 4-6 = Moderate risk 7 = High risk HEART score: guide application emergency department paper reference Website: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6005932/","code":""},{"path":"/reference/HEART.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"History, ECG, Age, Risk factors and Troponin (HEART) risk score — HEART","text":"","code":"HEART(   typical_symptoms.num = typical_symptoms.num,   ecg.normal = ecg.normal,   abn.repolarisation = abn.repolarisation,   ecg.st.depression = ecg.st.depression,   Age = Age,   diabetes = diabetes,   smoker = smoker,   hypertension = hypertension,   hyperlipidaemia = hyperlipidaemia,   family.history = family.history,   atherosclerotic.disease = atherosclerotic.disease,   presentation_hstni = presentation_hstni,   Gender = Gender,   classify = classify )"},{"path":"/reference/HEART.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"History, ECG, Age, Risk factors and Troponin (HEART) risk score — HEART","text":"typical_symptoms.num numeric vector number typical symptoms ecg.normal binary numeric vector,  1 = yes 0 = abn.repolarisation binary numeric vector,  1 = yes 0 = ecg.st.depression binary numeric vector, 1 = yes 0 = Age numeric vector age values, years diabetes binary numeric vector, 1 = yes 0 = smoker binary numeric vector, 1 = yes 0 = hypertension binary numeric vector, 1 = yes 0 = hyperlipidaemia binary numeric vector, 1 = yes 0 = family.history binary numeric vector, 1 = yes 0 = atherosclerotic.disease binary numeric vector, 1 = yes 0 = presentation_hstni continuous numeric vector troponin levels Gender binary character vector sex values. Categories include 'male' 'female' classify logical parameter indicate classification Scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/HEART.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"History, ECG, Age, Risk factors and Troponin (HEART) risk score — HEART","text":"vector HEART score calculations /vector classifications indicated","code":""},{"path":"/reference/HEART.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"History, ECG, Age, Risk factors and Troponin (HEART) risk score — HEART","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100 # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE) )  # Call the function with the cohort_xx   results <- cohort_xx %>% rowwise() %>%  mutate(HEART_score = HEART(typical_symptoms.num, ecg.normal,  abn.repolarisation, ecg.st.depression, Age, diabetes, smoker, hypertension,  hyperlipidaemia, family.history, atherosclerotic.disease,  presentation_hstni, Gender, classify = FALSE))"},{"path":"/reference/HEART_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"HEART risk score function\nHEART = History, ECG, Age, Risk factors, Troponin — HEART_scores","title":"HEART risk score function\nHEART = History, ECG, Age, Risk factors, Troponin — HEART_scores","text":"function allows calculate HEART score row wise data frame required variables. retrieve data frame two extra columns including calculations classifications","code":""},{"path":"/reference/HEART_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEART risk score function\nHEART = History, ECG, Age, Risk factors, Troponin — HEART_scores","text":"","code":"HEART_scores(   data,   typical_symptoms.num = typical_symptoms.num,   ecg.normal = ecg.normal,   abn.repolarisation = abn.repolarisation,   ecg.st.depression = ecg.st.depression,   Age = Age,   diabetes = diabetes,   smoker = smoker,   hypertension = hypertension,   hyperlipidaemia = hyperlipidaemia,   family.history = family.history,   atherosclerotic.disease = atherosclerotic.disease,   presentation_hstni = presentation_hstni,   Gender = Gender,   classify )"},{"path":"/reference/HEART_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HEART risk score function\nHEART = History, ECG, Age, Risk factors, Troponin — HEART_scores","text":"data data frame variables needed calculation: typical_symptoms.num, ecg.normal, abn.repolarisation, ecg.st.depression,Age, diabetes, smoker, hypertension, hyperlipidaemia, family.history, atherosclerotic.disease, presentation_hstni, Gender typical_symptoms.num numeric vector number typical symptoms ecg.normal binary numeric vector,  1 = yes 0 = abn.repolarisation binary numeric vector,  1 = yes 0 = ecg.st.depression binary numeric vector, 1 = yes 0 = Age numeric vector age values, years diabetes binary numeric vector, 1 = yes 0 = smoker binary numeric vector, 1 = yes 0 = hypertension binary numeric vector, 1 = yes 0 = hyperlipidaemia binary numeric vector, 1 = yes 0 = family.history binary numeric vector, 1 = yes 0 = atherosclerotic.disease binary numeric vector, 1 = yes 0 = presentation_hstni continuous numeric vector troponin levels Gender binary character vector sex values. Categories include 'male' 'female' classify logical parameter indicate classification Scores \"TRUE\" none \"FALSE\"","code":""},{"path":"/reference/HEART_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HEART risk score function\nHEART = History, ECG, Age, Risk factors, Troponin — HEART_scores","text":"data frame two extra columns including HEART score calculations classifications","code":""},{"path":"/reference/HEART_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HEART risk score function\nHEART = History, ECG, Age, Risk factors, Troponin — HEART_scores","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100 # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE) ) # Call the function with the cohort_xx result <- HEART_scores(data = cohort_xx, classify = TRUE) # Print the results summary(result$HEART_score) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    3.00    5.00    6.00    6.28    7.00   10.00  summary(result$HEART_strat) #>      Low risk Moderate risk     High risk  #>             1            56            43"},{"path":"/reference/RiskScoresCalc.html","id":null,"dir":"Reference","previous_headings":"","what":"Commonly used cardiovascular risk scores for the prediction of major cardiac events (MACE) — RiskScoresCalc","title":"Commonly used cardiovascular risk scores for the prediction of major cardiac events (MACE) — RiskScoresCalc","text":"function implements seven cardiovascular risk scores row wise data frame required variables. retrieve data frame two extra columns risk score including calculations classifications","code":""},{"path":"/reference/RiskScoresCalc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commonly used cardiovascular risk scores for the prediction of major cardiac events (MACE) — RiskScoresCalc","text":"","code":"calc_scores(   data,   typical_symptoms.num = typical_symptoms.num,   ecg.normal = ecg.normal,   abn.repolarisation = abn.repolarisation,   ecg.st.depression = ecg.st.depression,   Age = Age,   diabetes = diabetes,   smoker = smoker,   hypertension = hypertension,   hyperlipidaemia = hyperlipidaemia,   family.history = family.history,   atherosclerotic.disease = atherosclerotic.disease,   presentation_hstni = presentation_hstni,   Gender = Gender,   sweating = sweating,   pain.radiation = pain.radiation,   pleuritic = pleuritic,   palpation = palpation,   ecg.twi = ecg.twi,   second_hstni = second_hstni,   killip.class = killip.class,   heart.rate = heart.rate,   systolic.bp = systolic.bp,   aspirin = aspirin,   number.of.episodes.24h = number.of.episodes.24h,   previous.pci = previous.pci,   creat = creat,   previous.cabg = previous.cabg,   total.chol = total.chol,   total.hdl = total.hdl,   Ethnicity = Ethnicity )"},{"path":"/reference/RiskScoresCalc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commonly used cardiovascular risk scores for the prediction of major cardiac events (MACE) — RiskScoresCalc","text":"data data frame variables needed calculation: typical_symptoms.num numeric vector number typical symptoms; renames alternative column name ecg.normal binary numeric vector,  1 = yes 0 = ; renames alternative column name abn.repolarisation binary numeric vector,  1 = yes 0 = ; renames alternative column name ecg.st.depression binary numeric vector, 1 = yes 0 = ; renames alternative column name Age numeric vector age values, years; renames alternative column name diabetes binary numeric vector, 1 = yes 0 = ; renames alternative column name smoker binary numeric vector, 1 = yes 0 = ; renames alternative column name hypertension binary numeric vector, 1 = yes 0 = ; renames alternative column name hyperlipidaemia binary numeric vector, 1 = yes 0 = ; renames alternative column name family.history binary numeric vector, 1 = yes 0 = ; renames alternative column name atherosclerotic.disease binary numeric vector, 1 = yes 0 = ; renames alternative column name presentation_hstni continuous numeric vector troponin levels; renames alternative column name Gender binary character vector sex values. Categories include 'male' 'female'; renames alternative column name sweating binary numeric vector, 1 = yes 0 = ; renames alternative column name pain.radiation binary numeric vector, 1 = yes 0 = ; renames alternative column name pleuritic binary numeric vector, 1 = yes 0 = ; renames alternative column name palpation binary numeric vector, 1 = yes 0 = ; renames alternative column name ecg.twi binary numeric vector, 1 = yes 0 = ; renames alternative column name second_hstni binary numeric vector, 1 = yes 0 = ; renames alternative column name killip.class numeric vector killip class values, 1 4; renames alternative column name heart.rate numeric vector heart rate continuous values; renames alternative column name systolic.bp numeric vector systolic blood pressure continuous values; renames alternative column name aspirin binary numeric vector, 1 = yes 0 = ; renames alternative column name number..episodes.24h numeric vector number angina episodes 24 hours; renames alternative column name previous.pci binary numeric vector, 1 = yes 0 = ; renames alternative column name creat continuous numeric vector creatine levels previous.cabg binary numeric vector, 1 = yes 0 = ; renames alternative column name total.chol numeric vector total cholesterol values, mmol/L; renames alternative column name total.hdl numeric vector total high density lipoprotein HDL values, mmol/L; renames alternative column name Ethnicity character vector, 'white', 'black', 'asian', ","code":""},{"path":"/reference/RiskScoresCalc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commonly used cardiovascular risk scores for the prediction of major cardiac events (MACE) — RiskScoresCalc","text":"data frame two extra columns including cardiovascular risk score calculations classifications","code":""},{"path":"/reference/RiskScoresCalc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Commonly used cardiovascular risk scores for the prediction of major cardiac events (MACE) — RiskScoresCalc","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),   total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),   total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),   Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE) )   # Call the function with the cohort_xx  new_data_frame <- calc_scores(data = cohort_xx)"},{"path":"/reference/SCORE2-slash-OP.html","id":null,"dir":"Reference","previous_headings":"","what":"Systematic COronary Risk Evaluation (SCORE) model — SCORE2/OP","title":"Systematic COronary Risk Evaluation (SCORE) model — SCORE2/OP","text":"function implements SCORE2 SCORE2 older population (OP) score calculation vector formula SCORE2 Updated Supplementary Material page  9. paper: \"SCORE2 risk prediction algorithms: new models estimate 10-year risk cardiovascular disease Europe\" Age\t10-year risk fatal non-fatal cardiovascular disease | Low risk      |  Moderate risk  | High risk  | | ------------- | ------------- | :-------------: | ----------:| | < 50 years    |   <2.5 | 50 - 69 years |    <5 | => 70 years    |   <7.5 classifications referred https://www.inanutshell.ch/en/digital-doctors-bag/score2--score2-op/#:~:text=SCORE2","code":""},{"path":"/reference/SCORE2-slash-OP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Systematic COronary Risk Evaluation (SCORE) model — SCORE2/OP","text":"","code":"SCORE2(   Age = Age,   Gender = Gender,   smoker = smoker,   systolic.bp = systolic.bp,   diabetes = diabetes,   total.chol = total.chol,   total.hdl = total.hdl,   classify )"},{"path":"/reference/SCORE2-slash-OP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Systematic COronary Risk Evaluation (SCORE) model — SCORE2/OP","text":"Age numeric vector age values, years Gender binary character vector Gender values. Categories include 'male' 'female'. smoker binary numeric vector, 1 = yes 0 = systolic.bp numeric vector systolic blood pressure continuous values diabetes binary numeric vector, 1 = yes 0 = total.chol numeric vector total cholesterol values, mmol/L total.hdl numeric vector total high density lipoprotein total.hdl values, mmol/L classify set TRUE wish add column scores' categories","code":""},{"path":"/reference/SCORE2-slash-OP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Systematic COronary Risk Evaluation (SCORE) model — SCORE2/OP","text":"vector SCORE2/OP score calculations /vector classifications indicated","code":""},{"path":"/reference/SCORE2-slash-OP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Systematic COronary Risk Evaluation (SCORE) model — SCORE2/OP","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),   total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),   total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),   Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE) )  # Call the function with the cohort_xx    results <- cohort_xx %>% rowwise() %>%   mutate(SCORE2OP_score = SCORE2(Age, Gender, smoker, systolic.bp, diabetes,   total.chol, total.hdl, classify = FALSE))"},{"path":"/reference/SCORE2_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"SCORE2/OP risk score function\nSCORE2/OP = Systematic COronary Risk Evaluation /and Older Population — SCORE2_scores","title":"SCORE2/OP risk score function\nSCORE2/OP = Systematic COronary Risk Evaluation /and Older Population — SCORE2_scores","text":"function allows calculate SCORE2 OP score row wise data frame required variables. retrieve data frame two extra columns including calculations classifications","code":""},{"path":"/reference/SCORE2_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SCORE2/OP risk score function\nSCORE2/OP = Systematic COronary Risk Evaluation /and Older Population — SCORE2_scores","text":"","code":"SCORE2_scores(   data,   Age = Age,   Gender = Gender,   smoker = smoker,   systolic.bp = systolic.bp,   diabetes = diabetes,   total.chol = total.chol,   total.hdl = total.hdl,   classify )"},{"path":"/reference/SCORE2_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCORE2/OP risk score function\nSCORE2/OP = Systematic COronary Risk Evaluation /and Older Population — SCORE2_scores","text":"data data frame variables needed calculation:  Age, Gender, smoker, systolic.bp, diabetes, total.chol, total.hdl Age numeric vector age values, years Gender binary character vector Gender values. Categories include 'male' 'female'. smoker binary numeric vector, 1 = yes 0 = systolic.bp numeric vector systolic blood pressure continuous values diabetes binary numeric vector, 1 = yes 0 = total.chol numeric vector total cholesterol values, mmol/L total.hdl numeric vector total high density lipoprotein total.hdl values, mmol/L classify set TRUE wish add column scores' categories","code":""},{"path":"/reference/SCORE2_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SCORE2/OP risk score function\nSCORE2/OP = Systematic COronary Risk Evaluation /and Older Population — SCORE2_scores","text":"data frame two extra columns including SCORE2/OP score calculations classifications","code":""},{"path":"/reference/SCORE2_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SCORE2/OP risk score function\nSCORE2/OP = Systematic COronary Risk Evaluation /and Older Population — SCORE2_scores","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),   total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),   total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),   Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE) )  # Call the function with the cohort_xx result <- SCORE2_scores(data = cohort_xx, classify = TRUE)  # Print the results summary(result$SCORE2_score) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00   34.75  100.00   73.52  100.00  100.00  summary(result$SCORE2_strat) #> Very low risk      Low risk Moderate risk     High risk  #>             0             6             8            86"},{"path":"/reference/TIMI.html","id":null,"dir":"Reference","previous_headings":"","what":"Thrombolysis In Myocardial Infarction (TIMI) Risk Score for UA/NSTEMI — TIMI","title":"Thrombolysis In Myocardial Infarction (TIMI) Risk Score for UA/NSTEMI — TIMI","text":"function implements TIMI score calculation vector Age <65 = 0 65 - 74 = 2 >= 75 = 3 Risk factors >3* yes = 1,  = 0 Known CAD (stenosis >= 50 yes = 1,  = 0 Aspirin Use yes = 1,  = 0 Severe angina yes = 1,  = 0 ECG ST Elevation LBBB yes = 1,  = 0 Positive cardiac marker yes = 1,  = 0 Four possible outcomes 0 = low risk 1-2 = Low risk 3-4 = Moderate risk =>5 = High risk function allows calculate HEART score row wise data frame required variables. retrieve data frame two extra columns including calculations classifications","code":""},{"path":"/reference/TIMI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thrombolysis In Myocardial Infarction (TIMI) Risk Score for UA/NSTEMI — TIMI","text":"","code":"TIMI(   Age = Age,   hypertension = hypertension,   hyperlipidaemia = hyperlipidaemia,   family.history = family.history,   diabetes = diabetes,   smoker = smoker,   previous.pci = previous.pci,   previous.cabg = previous.cabg,   aspirin = aspirin,   number.of.episodes.24h = number.of.episodes.24h,   ecg.st.depression = ecg.st.depression,   presentation_hstni = presentation_hstni,   Gender = Gender,   classify )  TIMI_scores(   data,   Age = Age,   hypertension = hypertension,   hyperlipidaemia = hyperlipidaemia,   family.history = family.history,   diabetes = diabetes,   smoker = smoker,   previous.pci = previous.pci,   previous.cabg = previous.cabg,   aspirin = aspirin,   number.of.episodes.24h = number.of.episodes.24h,   ecg.st.depression = ecg.st.depression,   presentation_hstni = presentation_hstni,   Gender = Gender,   classify )"},{"path":"/reference/TIMI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thrombolysis In Myocardial Infarction (TIMI) Risk Score for UA/NSTEMI — TIMI","text":"Age numeric vector age values, years hypertension binary numeric vector, 1 = yes 0 = hyperlipidaemia binary numeric vector, 1 = yes 0 = family.history binary numeric vector, 1 = yes 0 = diabetes binary numeric vector, 1 = yes 0 = smoker binary numeric vector, 1 = yes 0 = previous.pci binary numeric vector, 1 = yes 0 = previous.cabg binary numeric vector, 1 = yes 0 = aspirin binary numeric vector, 1 = yes 0 = number..episodes.24h numeric vector number angina episodes 24 hours ecg.st.depression binary numeric vector, 1 = yes 0 = presentation_hstni continuous numeric vector troponin levels Gender binary character vector sex values. Categories include 'male' 'female' classify set TRUE wish add column scores' categories data data frame variables needed calculation: typical_symptoms.num, ecg.normal, abn.repolarisation, ecg.st.depression,Age, diabetes, smoker, hypertension, hyperlipidaemia, family.history, atherosclerotic.disease, presentation_hstni, Gender","code":""},{"path":"/reference/TIMI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thrombolysis In Myocardial Infarction (TIMI) Risk Score for UA/NSTEMI — TIMI","text":"vector TIMI score calculations /vector classifications indicated data frame two extra columns including HEART score calculations classifications","code":""},{"path":"/reference/TIMI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thrombolysis In Myocardial Infarction (TIMI) Risk Score for UA/NSTEMI — TIMI","text":"TIMI = Thrombolysis Myocardial Infarction","code":""},{"path":"/reference/TIMI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thrombolysis In Myocardial Infarction (TIMI) Risk Score for UA/NSTEMI — TIMI","text":"","code":"# Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),   total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),   total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),   Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE) )   # Call the function with the cohort_xx    results <- cohort_xx %>% rowwise() %>%   mutate(TIMI_score = TIMI(Age, hypertension, hyperlipidaemia, family.history,   diabetes, smoker, previous.pci, previous.cabg, aspirin, number.of.episodes.24h,   ecg.st.depression, presentation_hstni, Gender, classify = FALSE))    # Create a data frame or list with the necessary variables # Set the number of rows num_rows <- 100  # Create a larger dataset with 100 rows cohort_xx <- data.frame(   typical_symptoms.num = as.numeric(sample(0:6, num_rows, replace = TRUE)),   ecg.normal = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   abn.repolarisation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.st.depression = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   Age = as.numeric(sample(30:80, num_rows, replace = TRUE)),   diabetes = sample(c(1, 0), num_rows, replace = TRUE),   smoker = sample(c(1, 0), num_rows, replace = TRUE),   hypertension = sample(c(1, 0), num_rows, replace = TRUE),   hyperlipidaemia = sample(c(1, 0), num_rows, replace = TRUE),   family.history = sample(c(1, 0), num_rows, replace = TRUE),   atherosclerotic.disease = sample(c(1, 0), num_rows, replace = TRUE),   presentation_hstni = as.numeric(sample(10:100, num_rows, replace = TRUE)),   Gender = sample(c(\"male\", \"female\"), num_rows, replace = TRUE),   sweating = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pain.radiation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   pleuritic = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   palpation = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   ecg.twi = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   second_hstni = as.numeric(sample(1:200, num_rows, replace = TRUE)),   killip.class = as.numeric(sample(1:4, num_rows, replace = TRUE)),   systolic.bp = as.numeric(sample(0:300, num_rows, replace = TRUE)),   heart.rate = as.numeric(sample(0:300, num_rows, replace = TRUE)),   creat = as.numeric(sample(0:4, num_rows, replace = TRUE)),   cardiac.arrest = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.pci = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   previous.cabg = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   aspirin = as.numeric(sample(c(0, 1), num_rows, replace = TRUE)),   number.of.episodes.24h = as.numeric(sample(0:20, num_rows, replace = TRUE)),   total.chol = as.numeric(sample(5:100, num_rows, replace = TRUE)),   total.hdl = as.numeric(sample(2:5, num_rows, replace = TRUE)),   Ethnicity = sample(c(\"white\", \"black\", \"asian\", \"other\"), num_rows, replace = TRUE) )   # Call the function with the cohort_xx result <- TIMI_scores(data = cohort_xx, classify = TRUE) # Print the results summary(result$TIMI_score) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1.00    3.00    4.00    4.16    5.00    7.00  summary(result$TIMI_strat) #> Very low risk      Low risk Moderate risk     High risk  #>             0             7            57            36"},{"path":[]},{"path":"/news/index.html","id":"package-passed-all-tests-0-0-1","dir":"Changelog","previous_headings":"","what":"Package passed all tests","title":"version 0.0.1","text":"Added information suggested Victoria Wimmer fixed","code":""},{"path":"/news/index.html","id":"pakage-passed-all-tests-with-notes-only-0-0-1","dir":"Changelog","previous_headings":"","what":"Pakage Passed all Tests with Notes Only","title":"version 0.0.1","text":"Manatainer name Global environment","code":""},{"path":[]},{"path":"/news/index.html","id":"newsmd-setup-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"NEWS.md setup","title":"version 0.0.0.9000","text":"added NEWS.md creation newsmd","code":""}]
